#
# Copyright contributors to the Hyperledgendary Full Stack Asset Transfer project
#
# SPDX-License-Identifier: Apache-2.0

###############################################################################
# COMMON TARGETS                                                              #
###############################################################################


# Ensure all properties are exported as shell env-vars
set export

# set the current directory, and the location of the test dats
CWDIR := justfile_directory()

_default:
  @just -f {{justfile()}} --list


###############################################################################
# MICROFAB / DEV TARGETS                                                      #
###############################################################################

# Shut down the microfab (uf) instance
microfab-down:
    #!/bin/bash

    if docker inspect microfab &>/dev/null; then
        echo "Removing existing microfab container:"
        docker kill microfab
    fi


# Start a micro fab instance and create configuration in _cfg/uf
microfab: microfab-down
    #!/bin/bash
    set -e -o pipefail

    export CFG=$CWDIR/_cfg/uf
    export MICROFAB_CONFIG='{
        "endorsing_organizations":[
            {
                "name": "org1"
            },
            {
                "name": "org2"
            },
            {
                "name": "org3"
            }
        ],
        "channels":[
            {
                "name": "testchannel",
                "endorsing_organizations":[
                    "org1"
                ]
            }
        ],
        "capability_level":"V2_0"
    }'

    mkdir -p $CFG
    echo
    echo "Stating microfab...."

    docker run --name microfab -p 8080:8080 --add-host host.docker.internal:host-gateway --rm -d -e MICROFAB_CONFIG="${MICROFAB_CONFIG}" -v "$(pwd)/_cfg/data":"/opt/microfab/data"  ibmcom/ibp-microfab
    sleep 5

    curl -s http://console.127-0-0-1.nip.io:8080/ak/api/v1/components | weft microfab -w $CFG/_wallets -p $CFG/_gateways -m $CFG/_msp -f
    cat << EOF > $CFG/org1admin.env
    export CORE_PEER_LOCALMSPID=org1MSP
    export CORE_PEER_MSPCONFIGPATH=$CFG/_msp/org1/org1admin/msp
    export CORE_PEER_ADDRESS=org1peer-api.127-0-0-1.nip.io:8080
    export FABRIC_CFG_PATH=$CWDIR/_cfg/config
    export CORE_PEER_CLIENT_CONNTIMEOUT=15s
    export CORE_PEER_DELIVERYTIMEOUT_CONNTIMEOUT=15s
    EOF

    cat << EOF > $CFG/org2admin.env
    export CORE_PEER_LOCALMSPID=org2MSP
    export CORE_PEER_MSPCONFIGPATH=$CFG/_msp/org2/org2admin/msp
    export CORE_PEER_ADDRESS=org2peer-api.127-0-0-1.nip.io:8080
    export FABRIC_CFG_PATH=$CWDIR/_cfg/config
    export CORE_PEER_CLIENT_CONNTIMEOUT=15s
    export CORE_PEER_DELIVERYTIMEOUT_CONNTIMEOUT=15s
    EOF

    cat << EOF > $CFG/org3admin.env
    export CORE_PEER_LOCALMSPID=org3MSP
    export CORE_PEER_MSPCONFIGPATH=$CFG/_msp/org3/org3admin/msp
    export CORE_PEER_ADDRESS=org3peer-api.127-0-0-1.nip.io:8080
    export FABRIC_CFG_PATH=$CWDIR/_cfg/config
    export CORE_PEER_CLIENT_CONNTIMEOUT=15s
    export CORE_PEER_DELIVERYTIMEOUT_CONNTIMEOUT=15s
    EOF

    echo
    echo "To get an peer cli environment run:"
    echo
    echo 'source ./_cfg/uf/org1admin.env'

install-dummy-cc:
    #!/bin/bash
    set -e -o pipefail

    export PEER_CMD=$CWDIR/_cfg/bin/peer

    export CFG=$CWDIR/_cfg/uf
    export CC_NAME=iou
    export CHANNEL_ID=testchannel

    echo "Installing dummy chaincode to create namespace for CC_NAME=${CC_NAME} on CHANNEL_ID=${CHANNEL_ID}"
    echo

    # this is the ip address the peer will use to talk to the CHAINCODE_ID
    # remember this is relative from where the peer is running.
    export CHAINCODE_SERVER_ADDRESS=host.docker.internal:9999
    export CHAINCODE_ID=$(weft chaincode package caas --path . --label ${CC_NAME} --address ${CHAINCODE_SERVER_ADDRESS} --archive ${CC_NAME}.tgz --quiet)
    export CORE_PEER_LOCALMSPID=org1MSP
    export CORE_PEER_MSPCONFIGPATH=$CFG/_msp/org1/org1admin/msp
    export CORE_PEER_ADDRESS=org1peer-api.127-0-0-1.nip.io:8080
    export CORE_PEER_CLIENT_CONNTIMEOUT=15s
    export CORE_PEER_DELIVERYCLIENT_CONNTIMEOUT=15s

    echo "Set CHAINCODE_ID=${CHAINCODE_ID}"

    set -x && ${PEER_CMD} lifecycle chaincode install ${CC_NAME}.tgz &&     { set +x; } 2>/dev/null
    echo
    set -x && ${PEER_CMD} lifecycle chaincode approveformyorg --channelID ${CHANNEL_ID} --name ${CC_NAME} -v 0 --package-id $CHAINCODE_ID --sequence 1 --connTimeout 15s && { set +x; } 2>/dev/null
    echo
    set -x && ${PEER_CMD} lifecycle chaincode commit --channelID ${CHANNEL_ID} --name ${CC_NAME} -v 0 --sequence 1  --connTimeout 15s && { set +x; } 2>/dev/null
    echo
    set -x && ${PEER_CMD} lifecycle chaincode querycommitted --channelID=${CHANNEL_ID} && { set +x; } 2>/dev/null
    echo

    cat << CC_EOF >> $CFG/org1admin.env
    export CHAINCODE_SERVER_ADDRESS=0.0.0.0:9999
    export CHAINCODE_ID=${CHAINCODE_ID}
    CC_EOF

    echo "Added CHAINCODE_ID and CHAINCODE_SERVER_ADDRESS to org1admin.env"
    echo
    echo 'source ./_cfg/uf/org1admin.env'

fabbins:
   #!/bin/bash
   set -e -o pipefail

   export FABS=$CWDIR/_cfg
   export FABRIC_VERSION=2.2.7

   mkdir -p ${FABS}
   cd ${FABS} && curl -sSL https://bit.ly/2ysbOFE | bash -s -- ${FABRIC_VERSION} 1.4.9 -s -d