/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package utils

import (
	"crypto/rand"
	"fmt"
	"io"
)

var randChar = &poolRandReader{
	randReader: rand.Reader,
	pool:       []byte(`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`),
}

type poolRandReader struct {
	randReader io.Reader
	pool       []byte
}

func (r *poolRandReader) Read(p []byte) (int, error) {
	n, err := r.randReader.Read(p)
	if err != nil {
		return n, err
	}

	l := uint8(len(r.pool))
	for i := range p {
		p[i] = r.pool[p[i]%l]
	}
	return n, nil
}

// GenerateBytesUUID returns a UUID based on RFC 4122 returning the generated bytes
func GenerateBytesUUID() []byte {
	uuid := make([]byte, 16)
	_, err := io.ReadFull(rand.Reader, uuid)
	if err != nil {
		panic(fmt.Sprintf("Error generating UUID: %s", err))
	}

	// variant bits; see section 4.1.1
	uuid[8] = uuid[8]&^0xc0 | 0x80

	// version 4 (pseudo-random); see section 4.1.3
	uuid[6] = uuid[6]&^0xf0 | 0x40

	return uuid
}

// GenerateUUID returns a UUID based on RFC 4122
func GenerateUUID() string {
	uuid := GenerateBytesUUID()
	return idBytesToStr(uuid)
}

func idBytesToStr(id []byte) string {
	return fmt.Sprintf("%x-%x-%x-%x-%x", id[0:4], id[4:6], id[6:8], id[8:10], id[10:])
}

// GenerateUUIDOnlyLetters returns a UUID without digits
func GenerateUUIDOnlyLetters() string {
	uuid := make([]byte, 16)
	if _, err := io.ReadFull(randChar, uuid); err != nil {
		panic(err)
	}
	return string(uuid)
}
