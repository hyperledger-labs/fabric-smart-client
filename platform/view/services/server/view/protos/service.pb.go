// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package protos

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x52, 0x7c,
	0xc9, 0xf9, 0xb9, 0xb9, 0x89, 0x79, 0x29, 0xc5, 0x10, 0x71, 0xa3, 0x05, 0x8c, 0x5c, 0xdc, 0x61,
	0x99, 0xa9, 0xe5, 0xc1, 0x10, 0xd5, 0x42, 0x6e, 0x5c, 0x7c, 0x01, 0x45, 0xf9, 0xc9, 0xa9, 0xc5,
	0xc5, 0xce, 0x10, 0x85, 0x42, 0xa2, 0x10, 0x95, 0xc5, 0x7a, 0xc1, 0x99, 0xe9, 0x79, 0xa9, 0x29,
	0x50, 0x61, 0x29, 0x59, 0xac, 0xc2, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x9e,
	0x5c, 0xbc, 0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x14, 0x19, 0xa3, 0xc4, 0x60, 0xc0, 0xe8, 0xc4,
	0x1d, 0x05, 0x75, 0x7c, 0x03, 0x23, 0x63, 0x12, 0x84, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x13, 0xf1, 0xec, 0xdf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ViewServiceClient interface {
	// ProcessCommand processes the passed command ensuring proper access control.
	// The returned response allows the client to understand if the
	// operation was successfully executed and if not, the response
	// reports the reason of the failure.
	ProcessCommand(ctx context.Context, in *SignedCommand, opts ...grpc.CallOption) (*SignedCommandResponse, error)
	StreamCommand(ctx context.Context, in *SignedCommand, opts ...grpc.CallOption) (ViewService_StreamCommandClient, error)
}

type viewServiceClient struct {
	cc *grpc.ClientConn
}

func NewViewServiceClient(cc *grpc.ClientConn) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) ProcessCommand(ctx context.Context, in *SignedCommand, opts ...grpc.CallOption) (*SignedCommandResponse, error) {
	out := new(SignedCommandResponse)
	err := c.cc.Invoke(ctx, "/protos.ViewService/ProcessCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) StreamCommand(ctx context.Context, in *SignedCommand, opts ...grpc.CallOption) (ViewService_StreamCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[0], "/protos.ViewService/StreamCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceStreamCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_StreamCommandClient interface {
	Recv() (*SignedCommandResponse, error)
	grpc.ClientStream
}

type viewServiceStreamCommandClient struct {
	grpc.ClientStream
}

func (x *viewServiceStreamCommandClient) Recv() (*SignedCommandResponse, error) {
	m := new(SignedCommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ViewServiceServer is the server API for ViewService service.
type ViewServiceServer interface {
	// ProcessCommand processes the passed command ensuring proper access control.
	// The returned response allows the client to understand if the
	// operation was successfully executed and if not, the response
	// reports the reason of the failure.
	ProcessCommand(context.Context, *SignedCommand) (*SignedCommandResponse, error)
	StreamCommand(*SignedCommand, ViewService_StreamCommandServer) error
}

// UnimplementedViewServiceServer can be embedded to have forward compatible implementations.
type UnimplementedViewServiceServer struct {
}

func (*UnimplementedViewServiceServer) ProcessCommand(ctx context.Context, req *SignedCommand) (*SignedCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCommand not implemented")
}
func (*UnimplementedViewServiceServer) StreamCommand(req *SignedCommand, srv ViewService_StreamCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCommand not implemented")
}

func RegisterViewServiceServer(s *grpc.Server, srv ViewServiceServer) {
	s.RegisterService(&_ViewService_serviceDesc, srv)
}

func _ViewService_ProcessCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).ProcessCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ViewService/ProcessCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).ProcessCommand(ctx, req.(*SignedCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_StreamCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SignedCommand)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).StreamCommand(m, &viewServiceStreamCommandServer{stream})
}

type ViewService_StreamCommandServer interface {
	Send(*SignedCommandResponse) error
	grpc.ServerStream
}

type viewServiceStreamCommandServer struct {
	grpc.ServerStream
}

func (x *viewServiceStreamCommandServer) Send(m *SignedCommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ViewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessCommand",
			Handler:    _ViewService_ProcessCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCommand",
			Handler:       _ViewService_StreamCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
