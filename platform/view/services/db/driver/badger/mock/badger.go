// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	badgera "github.com/dgraph-io/badger/v3"
)

type BadgerDB struct {
	IsClosedStub        func() bool
	isClosedMutex       sync.RWMutex
	isClosedArgsForCall []struct {
	}
	isClosedReturns struct {
		result1 bool
	}
	isClosedReturnsOnCall map[int]struct {
		result1 bool
	}
	OptsStub        func() badgera.Options
	optsMutex       sync.RWMutex
	optsArgsForCall []struct {
	}
	optsReturns struct {
		result1 badgera.Options
	}
	optsReturnsOnCall map[int]struct {
		result1 badgera.Options
	}
	RunValueLogGCStub        func(float64) error
	runValueLogGCMutex       sync.RWMutex
	runValueLogGCArgsForCall []struct {
		arg1 float64
	}
	runValueLogGCReturns struct {
		result1 error
	}
	runValueLogGCReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BadgerDB) IsClosed() bool {
	fake.isClosedMutex.Lock()
	ret, specificReturn := fake.isClosedReturnsOnCall[len(fake.isClosedArgsForCall)]
	fake.isClosedArgsForCall = append(fake.isClosedArgsForCall, struct {
	}{})
	stub := fake.IsClosedStub
	fakeReturns := fake.isClosedReturns
	fake.recordInvocation("IsClosed", []interface{}{})
	fake.isClosedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *BadgerDB) IsClosedCallCount() int {
	fake.isClosedMutex.RLock()
	defer fake.isClosedMutex.RUnlock()
	return len(fake.isClosedArgsForCall)
}

func (fake *BadgerDB) IsClosedCalls(stub func() bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = stub
}

func (fake *BadgerDB) IsClosedReturns(result1 bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = nil
	fake.isClosedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *BadgerDB) IsClosedReturnsOnCall(i int, result1 bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = nil
	if fake.isClosedReturnsOnCall == nil {
		fake.isClosedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isClosedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *BadgerDB) Opts() badgera.Options {
	fake.optsMutex.Lock()
	ret, specificReturn := fake.optsReturnsOnCall[len(fake.optsArgsForCall)]
	fake.optsArgsForCall = append(fake.optsArgsForCall, struct {
	}{})
	stub := fake.OptsStub
	fakeReturns := fake.optsReturns
	fake.recordInvocation("Opts", []interface{}{})
	fake.optsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *BadgerDB) OptsCallCount() int {
	fake.optsMutex.RLock()
	defer fake.optsMutex.RUnlock()
	return len(fake.optsArgsForCall)
}

func (fake *BadgerDB) OptsCalls(stub func() badgera.Options) {
	fake.optsMutex.Lock()
	defer fake.optsMutex.Unlock()
	fake.OptsStub = stub
}

func (fake *BadgerDB) OptsReturns(result1 badgera.Options) {
	fake.optsMutex.Lock()
	defer fake.optsMutex.Unlock()
	fake.OptsStub = nil
	fake.optsReturns = struct {
		result1 badgera.Options
	}{result1}
}

func (fake *BadgerDB) OptsReturnsOnCall(i int, result1 badgera.Options) {
	fake.optsMutex.Lock()
	defer fake.optsMutex.Unlock()
	fake.OptsStub = nil
	if fake.optsReturnsOnCall == nil {
		fake.optsReturnsOnCall = make(map[int]struct {
			result1 badgera.Options
		})
	}
	fake.optsReturnsOnCall[i] = struct {
		result1 badgera.Options
	}{result1}
}

func (fake *BadgerDB) RunValueLogGC(arg1 float64) error {
	fake.runValueLogGCMutex.Lock()
	ret, specificReturn := fake.runValueLogGCReturnsOnCall[len(fake.runValueLogGCArgsForCall)]
	fake.runValueLogGCArgsForCall = append(fake.runValueLogGCArgsForCall, struct {
		arg1 float64
	}{arg1})
	stub := fake.RunValueLogGCStub
	fakeReturns := fake.runValueLogGCReturns
	fake.recordInvocation("RunValueLogGC", []interface{}{arg1})
	fake.runValueLogGCMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *BadgerDB) RunValueLogGCCallCount() int {
	fake.runValueLogGCMutex.RLock()
	defer fake.runValueLogGCMutex.RUnlock()
	return len(fake.runValueLogGCArgsForCall)
}

func (fake *BadgerDB) RunValueLogGCCalls(stub func(float64) error) {
	fake.runValueLogGCMutex.Lock()
	defer fake.runValueLogGCMutex.Unlock()
	fake.RunValueLogGCStub = stub
}

func (fake *BadgerDB) RunValueLogGCArgsForCall(i int) float64 {
	fake.runValueLogGCMutex.RLock()
	defer fake.runValueLogGCMutex.RUnlock()
	argsForCall := fake.runValueLogGCArgsForCall[i]
	return argsForCall.arg1
}

func (fake *BadgerDB) RunValueLogGCReturns(result1 error) {
	fake.runValueLogGCMutex.Lock()
	defer fake.runValueLogGCMutex.Unlock()
	fake.RunValueLogGCStub = nil
	fake.runValueLogGCReturns = struct {
		result1 error
	}{result1}
}

func (fake *BadgerDB) RunValueLogGCReturnsOnCall(i int, result1 error) {
	fake.runValueLogGCMutex.Lock()
	defer fake.runValueLogGCMutex.Unlock()
	fake.RunValueLogGCStub = nil
	if fake.runValueLogGCReturnsOnCall == nil {
		fake.runValueLogGCReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runValueLogGCReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *BadgerDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isClosedMutex.RLock()
	defer fake.isClosedMutex.RUnlock()
	fake.optsMutex.RLock()
	defer fake.optsMutex.RUnlock()
	fake.runValueLogGCMutex.RLock()
	defer fake.runValueLogGCMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BadgerDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
