// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/services/db/driver"
)

type SQLErrorWrapper struct {
	WrapErrorStub        func(error) error
	wrapErrorMutex       sync.RWMutex
	wrapErrorArgsForCall []struct {
		arg1 error
	}
	wrapErrorReturns struct {
		result1 error
	}
	wrapErrorReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SQLErrorWrapper) WrapError(arg1 error) error {
	fake.wrapErrorMutex.Lock()
	ret, specificReturn := fake.wrapErrorReturnsOnCall[len(fake.wrapErrorArgsForCall)]
	fake.wrapErrorArgsForCall = append(fake.wrapErrorArgsForCall, struct {
		arg1 error
	}{arg1})
	stub := fake.WrapErrorStub
	fakeReturns := fake.wrapErrorReturns
	fake.recordInvocation("WrapError", []interface{}{arg1})
	fake.wrapErrorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SQLErrorWrapper) WrapErrorCallCount() int {
	fake.wrapErrorMutex.RLock()
	defer fake.wrapErrorMutex.RUnlock()
	return len(fake.wrapErrorArgsForCall)
}

func (fake *SQLErrorWrapper) WrapErrorCalls(stub func(error) error) {
	fake.wrapErrorMutex.Lock()
	defer fake.wrapErrorMutex.Unlock()
	fake.WrapErrorStub = stub
}

func (fake *SQLErrorWrapper) WrapErrorArgsForCall(i int) error {
	fake.wrapErrorMutex.RLock()
	defer fake.wrapErrorMutex.RUnlock()
	argsForCall := fake.wrapErrorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SQLErrorWrapper) WrapErrorReturns(result1 error) {
	fake.wrapErrorMutex.Lock()
	defer fake.wrapErrorMutex.Unlock()
	fake.WrapErrorStub = nil
	fake.wrapErrorReturns = struct {
		result1 error
	}{result1}
}

func (fake *SQLErrorWrapper) WrapErrorReturnsOnCall(i int, result1 error) {
	fake.wrapErrorMutex.Lock()
	defer fake.wrapErrorMutex.Unlock()
	fake.WrapErrorStub = nil
	if fake.wrapErrorReturnsOnCall == nil {
		fake.wrapErrorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.wrapErrorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SQLErrorWrapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.wrapErrorMutex.RLock()
	defer fake.wrapErrorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SQLErrorWrapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.SQLErrorWrapper = new(SQLErrorWrapper)
