// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/services/endpoint"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
)

type BindingStore struct {
	GetLongTermStub        func(context.Context, view.Identity) (view.Identity, error)
	getLongTermMutex       sync.RWMutex
	getLongTermArgsForCall []struct {
		arg1 context.Context
		arg2 view.Identity
	}
	getLongTermReturns struct {
		result1 view.Identity
		result2 error
	}
	getLongTermReturnsOnCall map[int]struct {
		result1 view.Identity
		result2 error
	}
	HaveSameBindingStub        func(context.Context, view.Identity, view.Identity) (bool, error)
	haveSameBindingMutex       sync.RWMutex
	haveSameBindingArgsForCall []struct {
		arg1 context.Context
		arg2 view.Identity
		arg3 view.Identity
	}
	haveSameBindingReturns struct {
		result1 bool
		result2 error
	}
	haveSameBindingReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	PutBindingsStub        func(context.Context, view.Identity, ...view.Identity) error
	putBindingsMutex       sync.RWMutex
	putBindingsArgsForCall []struct {
		arg1 context.Context
		arg2 view.Identity
		arg3 []view.Identity
	}
	putBindingsReturns struct {
		result1 error
	}
	putBindingsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BindingStore) GetLongTerm(arg1 context.Context, arg2 view.Identity) (view.Identity, error) {
	fake.getLongTermMutex.Lock()
	ret, specificReturn := fake.getLongTermReturnsOnCall[len(fake.getLongTermArgsForCall)]
	fake.getLongTermArgsForCall = append(fake.getLongTermArgsForCall, struct {
		arg1 context.Context
		arg2 view.Identity
	}{arg1, arg2})
	stub := fake.GetLongTermStub
	fakeReturns := fake.getLongTermReturns
	fake.recordInvocation("GetLongTerm", []interface{}{arg1, arg2})
	fake.getLongTermMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *BindingStore) GetLongTermCallCount() int {
	fake.getLongTermMutex.RLock()
	defer fake.getLongTermMutex.RUnlock()
	return len(fake.getLongTermArgsForCall)
}

func (fake *BindingStore) GetLongTermCalls(stub func(context.Context, view.Identity) (view.Identity, error)) {
	fake.getLongTermMutex.Lock()
	defer fake.getLongTermMutex.Unlock()
	fake.GetLongTermStub = stub
}

func (fake *BindingStore) GetLongTermArgsForCall(i int) (context.Context, view.Identity) {
	fake.getLongTermMutex.RLock()
	defer fake.getLongTermMutex.RUnlock()
	argsForCall := fake.getLongTermArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *BindingStore) GetLongTermReturns(result1 view.Identity, result2 error) {
	fake.getLongTermMutex.Lock()
	defer fake.getLongTermMutex.Unlock()
	fake.GetLongTermStub = nil
	fake.getLongTermReturns = struct {
		result1 view.Identity
		result2 error
	}{result1, result2}
}

func (fake *BindingStore) GetLongTermReturnsOnCall(i int, result1 view.Identity, result2 error) {
	fake.getLongTermMutex.Lock()
	defer fake.getLongTermMutex.Unlock()
	fake.GetLongTermStub = nil
	if fake.getLongTermReturnsOnCall == nil {
		fake.getLongTermReturnsOnCall = make(map[int]struct {
			result1 view.Identity
			result2 error
		})
	}
	fake.getLongTermReturnsOnCall[i] = struct {
		result1 view.Identity
		result2 error
	}{result1, result2}
}

func (fake *BindingStore) HaveSameBinding(arg1 context.Context, arg2 view.Identity, arg3 view.Identity) (bool, error) {
	fake.haveSameBindingMutex.Lock()
	ret, specificReturn := fake.haveSameBindingReturnsOnCall[len(fake.haveSameBindingArgsForCall)]
	fake.haveSameBindingArgsForCall = append(fake.haveSameBindingArgsForCall, struct {
		arg1 context.Context
		arg2 view.Identity
		arg3 view.Identity
	}{arg1, arg2, arg3})
	stub := fake.HaveSameBindingStub
	fakeReturns := fake.haveSameBindingReturns
	fake.recordInvocation("HaveSameBinding", []interface{}{arg1, arg2, arg3})
	fake.haveSameBindingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *BindingStore) HaveSameBindingCallCount() int {
	fake.haveSameBindingMutex.RLock()
	defer fake.haveSameBindingMutex.RUnlock()
	return len(fake.haveSameBindingArgsForCall)
}

func (fake *BindingStore) HaveSameBindingCalls(stub func(context.Context, view.Identity, view.Identity) (bool, error)) {
	fake.haveSameBindingMutex.Lock()
	defer fake.haveSameBindingMutex.Unlock()
	fake.HaveSameBindingStub = stub
}

func (fake *BindingStore) HaveSameBindingArgsForCall(i int) (context.Context, view.Identity, view.Identity) {
	fake.haveSameBindingMutex.RLock()
	defer fake.haveSameBindingMutex.RUnlock()
	argsForCall := fake.haveSameBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *BindingStore) HaveSameBindingReturns(result1 bool, result2 error) {
	fake.haveSameBindingMutex.Lock()
	defer fake.haveSameBindingMutex.Unlock()
	fake.HaveSameBindingStub = nil
	fake.haveSameBindingReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *BindingStore) HaveSameBindingReturnsOnCall(i int, result1 bool, result2 error) {
	fake.haveSameBindingMutex.Lock()
	defer fake.haveSameBindingMutex.Unlock()
	fake.HaveSameBindingStub = nil
	if fake.haveSameBindingReturnsOnCall == nil {
		fake.haveSameBindingReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.haveSameBindingReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *BindingStore) PutBindings(arg1 context.Context, arg2 view.Identity, arg3 ...view.Identity) error {
	fake.putBindingsMutex.Lock()
	ret, specificReturn := fake.putBindingsReturnsOnCall[len(fake.putBindingsArgsForCall)]
	fake.putBindingsArgsForCall = append(fake.putBindingsArgsForCall, struct {
		arg1 context.Context
		arg2 view.Identity
		arg3 []view.Identity
	}{arg1, arg2, arg3})
	stub := fake.PutBindingsStub
	fakeReturns := fake.putBindingsReturns
	fake.recordInvocation("PutBindings", []interface{}{arg1, arg2, arg3})
	fake.putBindingsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *BindingStore) PutBindingsCallCount() int {
	fake.putBindingsMutex.RLock()
	defer fake.putBindingsMutex.RUnlock()
	return len(fake.putBindingsArgsForCall)
}

func (fake *BindingStore) PutBindingsCalls(stub func(context.Context, view.Identity, ...view.Identity) error) {
	fake.putBindingsMutex.Lock()
	defer fake.putBindingsMutex.Unlock()
	fake.PutBindingsStub = stub
}

func (fake *BindingStore) PutBindingsArgsForCall(i int) (context.Context, view.Identity, []view.Identity) {
	fake.putBindingsMutex.RLock()
	defer fake.putBindingsMutex.RUnlock()
	argsForCall := fake.putBindingsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *BindingStore) PutBindingsReturns(result1 error) {
	fake.putBindingsMutex.Lock()
	defer fake.putBindingsMutex.Unlock()
	fake.PutBindingsStub = nil
	fake.putBindingsReturns = struct {
		result1 error
	}{result1}
}

func (fake *BindingStore) PutBindingsReturnsOnCall(i int, result1 error) {
	fake.putBindingsMutex.Lock()
	defer fake.putBindingsMutex.Unlock()
	fake.PutBindingsStub = nil
	if fake.putBindingsReturnsOnCall == nil {
		fake.putBindingsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putBindingsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *BindingStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BindingStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ endpoint.BindingStore = new(BindingStore)
