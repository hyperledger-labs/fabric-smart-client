// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/services/view"
	viewa "github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
)

type CommLayer struct {
	DeleteSessionsStub        func(context.Context, string)
	deleteSessionsMutex       sync.RWMutex
	deleteSessionsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	MasterSessionStub        func() (viewa.Session, error)
	masterSessionMutex       sync.RWMutex
	masterSessionArgsForCall []struct {
	}
	masterSessionReturns struct {
		result1 viewa.Session
		result2 error
	}
	masterSessionReturnsOnCall map[int]struct {
		result1 viewa.Session
		result2 error
	}
	NewSessionStub        func(string, string, string, []byte) (viewa.Session, error)
	newSessionMutex       sync.RWMutex
	newSessionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []byte
	}
	newSessionReturns struct {
		result1 viewa.Session
		result2 error
	}
	newSessionReturnsOnCall map[int]struct {
		result1 viewa.Session
		result2 error
	}
	NewSessionWithIDStub        func(string, string, string, []byte, viewa.Identity, *viewa.Message) (viewa.Session, error)
	newSessionWithIDMutex       sync.RWMutex
	newSessionWithIDArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []byte
		arg5 viewa.Identity
		arg6 *viewa.Message
	}
	newSessionWithIDReturns struct {
		result1 viewa.Session
		result2 error
	}
	newSessionWithIDReturnsOnCall map[int]struct {
		result1 viewa.Session
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CommLayer) DeleteSessions(arg1 context.Context, arg2 string) {
	fake.deleteSessionsMutex.Lock()
	fake.deleteSessionsArgsForCall = append(fake.deleteSessionsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteSessionsStub
	fake.recordInvocation("DeleteSessions", []interface{}{arg1, arg2})
	fake.deleteSessionsMutex.Unlock()
	if stub != nil {
		fake.DeleteSessionsStub(arg1, arg2)
	}
}

func (fake *CommLayer) DeleteSessionsCallCount() int {
	fake.deleteSessionsMutex.RLock()
	defer fake.deleteSessionsMutex.RUnlock()
	return len(fake.deleteSessionsArgsForCall)
}

func (fake *CommLayer) DeleteSessionsCalls(stub func(context.Context, string)) {
	fake.deleteSessionsMutex.Lock()
	defer fake.deleteSessionsMutex.Unlock()
	fake.DeleteSessionsStub = stub
}

func (fake *CommLayer) DeleteSessionsArgsForCall(i int) (context.Context, string) {
	fake.deleteSessionsMutex.RLock()
	defer fake.deleteSessionsMutex.RUnlock()
	argsForCall := fake.deleteSessionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CommLayer) MasterSession() (viewa.Session, error) {
	fake.masterSessionMutex.Lock()
	ret, specificReturn := fake.masterSessionReturnsOnCall[len(fake.masterSessionArgsForCall)]
	fake.masterSessionArgsForCall = append(fake.masterSessionArgsForCall, struct {
	}{})
	stub := fake.MasterSessionStub
	fakeReturns := fake.masterSessionReturns
	fake.recordInvocation("MasterSession", []interface{}{})
	fake.masterSessionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CommLayer) MasterSessionCallCount() int {
	fake.masterSessionMutex.RLock()
	defer fake.masterSessionMutex.RUnlock()
	return len(fake.masterSessionArgsForCall)
}

func (fake *CommLayer) MasterSessionCalls(stub func() (viewa.Session, error)) {
	fake.masterSessionMutex.Lock()
	defer fake.masterSessionMutex.Unlock()
	fake.MasterSessionStub = stub
}

func (fake *CommLayer) MasterSessionReturns(result1 viewa.Session, result2 error) {
	fake.masterSessionMutex.Lock()
	defer fake.masterSessionMutex.Unlock()
	fake.MasterSessionStub = nil
	fake.masterSessionReturns = struct {
		result1 viewa.Session
		result2 error
	}{result1, result2}
}

func (fake *CommLayer) MasterSessionReturnsOnCall(i int, result1 viewa.Session, result2 error) {
	fake.masterSessionMutex.Lock()
	defer fake.masterSessionMutex.Unlock()
	fake.MasterSessionStub = nil
	if fake.masterSessionReturnsOnCall == nil {
		fake.masterSessionReturnsOnCall = make(map[int]struct {
			result1 viewa.Session
			result2 error
		})
	}
	fake.masterSessionReturnsOnCall[i] = struct {
		result1 viewa.Session
		result2 error
	}{result1, result2}
}

func (fake *CommLayer) NewSession(arg1 string, arg2 string, arg3 string, arg4 []byte) (viewa.Session, error) {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.newSessionMutex.Lock()
	ret, specificReturn := fake.newSessionReturnsOnCall[len(fake.newSessionArgsForCall)]
	fake.newSessionArgsForCall = append(fake.newSessionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []byte
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.NewSessionStub
	fakeReturns := fake.newSessionReturns
	fake.recordInvocation("NewSession", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.newSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CommLayer) NewSessionCallCount() int {
	fake.newSessionMutex.RLock()
	defer fake.newSessionMutex.RUnlock()
	return len(fake.newSessionArgsForCall)
}

func (fake *CommLayer) NewSessionCalls(stub func(string, string, string, []byte) (viewa.Session, error)) {
	fake.newSessionMutex.Lock()
	defer fake.newSessionMutex.Unlock()
	fake.NewSessionStub = stub
}

func (fake *CommLayer) NewSessionArgsForCall(i int) (string, string, string, []byte) {
	fake.newSessionMutex.RLock()
	defer fake.newSessionMutex.RUnlock()
	argsForCall := fake.newSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CommLayer) NewSessionReturns(result1 viewa.Session, result2 error) {
	fake.newSessionMutex.Lock()
	defer fake.newSessionMutex.Unlock()
	fake.NewSessionStub = nil
	fake.newSessionReturns = struct {
		result1 viewa.Session
		result2 error
	}{result1, result2}
}

func (fake *CommLayer) NewSessionReturnsOnCall(i int, result1 viewa.Session, result2 error) {
	fake.newSessionMutex.Lock()
	defer fake.newSessionMutex.Unlock()
	fake.NewSessionStub = nil
	if fake.newSessionReturnsOnCall == nil {
		fake.newSessionReturnsOnCall = make(map[int]struct {
			result1 viewa.Session
			result2 error
		})
	}
	fake.newSessionReturnsOnCall[i] = struct {
		result1 viewa.Session
		result2 error
	}{result1, result2}
}

func (fake *CommLayer) NewSessionWithID(arg1 string, arg2 string, arg3 string, arg4 []byte, arg5 viewa.Identity, arg6 *viewa.Message) (viewa.Session, error) {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.newSessionWithIDMutex.Lock()
	ret, specificReturn := fake.newSessionWithIDReturnsOnCall[len(fake.newSessionWithIDArgsForCall)]
	fake.newSessionWithIDArgsForCall = append(fake.newSessionWithIDArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []byte
		arg5 viewa.Identity
		arg6 *viewa.Message
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	stub := fake.NewSessionWithIDStub
	fakeReturns := fake.newSessionWithIDReturns
	fake.recordInvocation("NewSessionWithID", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	fake.newSessionWithIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CommLayer) NewSessionWithIDCallCount() int {
	fake.newSessionWithIDMutex.RLock()
	defer fake.newSessionWithIDMutex.RUnlock()
	return len(fake.newSessionWithIDArgsForCall)
}

func (fake *CommLayer) NewSessionWithIDCalls(stub func(string, string, string, []byte, viewa.Identity, *viewa.Message) (viewa.Session, error)) {
	fake.newSessionWithIDMutex.Lock()
	defer fake.newSessionWithIDMutex.Unlock()
	fake.NewSessionWithIDStub = stub
}

func (fake *CommLayer) NewSessionWithIDArgsForCall(i int) (string, string, string, []byte, viewa.Identity, *viewa.Message) {
	fake.newSessionWithIDMutex.RLock()
	defer fake.newSessionWithIDMutex.RUnlock()
	argsForCall := fake.newSessionWithIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *CommLayer) NewSessionWithIDReturns(result1 viewa.Session, result2 error) {
	fake.newSessionWithIDMutex.Lock()
	defer fake.newSessionWithIDMutex.Unlock()
	fake.NewSessionWithIDStub = nil
	fake.newSessionWithIDReturns = struct {
		result1 viewa.Session
		result2 error
	}{result1, result2}
}

func (fake *CommLayer) NewSessionWithIDReturnsOnCall(i int, result1 viewa.Session, result2 error) {
	fake.newSessionWithIDMutex.Lock()
	defer fake.newSessionWithIDMutex.Unlock()
	fake.NewSessionWithIDStub = nil
	if fake.newSessionWithIDReturnsOnCall == nil {
		fake.newSessionWithIDReturnsOnCall = make(map[int]struct {
			result1 viewa.Session
			result2 error
		})
	}
	fake.newSessionWithIDReturnsOnCall[i] = struct {
		result1 viewa.Session
		result2 error
	}{result1, result2}
}

func (fake *CommLayer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CommLayer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ view.CommLayer = new(CommLayer)
