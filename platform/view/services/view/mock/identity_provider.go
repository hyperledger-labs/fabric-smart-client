// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/services/view"
	viewa "github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
)

type IdentityProvider struct {
	DefaultIdentityStub        func() viewa.Identity
	defaultIdentityMutex       sync.RWMutex
	defaultIdentityArgsForCall []struct {
	}
	defaultIdentityReturns struct {
		result1 viewa.Identity
	}
	defaultIdentityReturnsOnCall map[int]struct {
		result1 viewa.Identity
	}
	IdentityStub        func(string) viewa.Identity
	identityMutex       sync.RWMutex
	identityArgsForCall []struct {
		arg1 string
	}
	identityReturns struct {
		result1 viewa.Identity
	}
	identityReturnsOnCall map[int]struct {
		result1 viewa.Identity
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IdentityProvider) DefaultIdentity() viewa.Identity {
	fake.defaultIdentityMutex.Lock()
	ret, specificReturn := fake.defaultIdentityReturnsOnCall[len(fake.defaultIdentityArgsForCall)]
	fake.defaultIdentityArgsForCall = append(fake.defaultIdentityArgsForCall, struct {
	}{})
	stub := fake.DefaultIdentityStub
	fakeReturns := fake.defaultIdentityReturns
	fake.recordInvocation("DefaultIdentity", []interface{}{})
	fake.defaultIdentityMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityProvider) DefaultIdentityCallCount() int {
	fake.defaultIdentityMutex.RLock()
	defer fake.defaultIdentityMutex.RUnlock()
	return len(fake.defaultIdentityArgsForCall)
}

func (fake *IdentityProvider) DefaultIdentityCalls(stub func() viewa.Identity) {
	fake.defaultIdentityMutex.Lock()
	defer fake.defaultIdentityMutex.Unlock()
	fake.DefaultIdentityStub = stub
}

func (fake *IdentityProvider) DefaultIdentityReturns(result1 viewa.Identity) {
	fake.defaultIdentityMutex.Lock()
	defer fake.defaultIdentityMutex.Unlock()
	fake.DefaultIdentityStub = nil
	fake.defaultIdentityReturns = struct {
		result1 viewa.Identity
	}{result1}
}

func (fake *IdentityProvider) DefaultIdentityReturnsOnCall(i int, result1 viewa.Identity) {
	fake.defaultIdentityMutex.Lock()
	defer fake.defaultIdentityMutex.Unlock()
	fake.DefaultIdentityStub = nil
	if fake.defaultIdentityReturnsOnCall == nil {
		fake.defaultIdentityReturnsOnCall = make(map[int]struct {
			result1 viewa.Identity
		})
	}
	fake.defaultIdentityReturnsOnCall[i] = struct {
		result1 viewa.Identity
	}{result1}
}

func (fake *IdentityProvider) Identity(arg1 string) viewa.Identity {
	fake.identityMutex.Lock()
	ret, specificReturn := fake.identityReturnsOnCall[len(fake.identityArgsForCall)]
	fake.identityArgsForCall = append(fake.identityArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IdentityStub
	fakeReturns := fake.identityReturns
	fake.recordInvocation("Identity", []interface{}{arg1})
	fake.identityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityProvider) IdentityCallCount() int {
	fake.identityMutex.RLock()
	defer fake.identityMutex.RUnlock()
	return len(fake.identityArgsForCall)
}

func (fake *IdentityProvider) IdentityCalls(stub func(string) viewa.Identity) {
	fake.identityMutex.Lock()
	defer fake.identityMutex.Unlock()
	fake.IdentityStub = stub
}

func (fake *IdentityProvider) IdentityArgsForCall(i int) string {
	fake.identityMutex.RLock()
	defer fake.identityMutex.RUnlock()
	argsForCall := fake.identityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IdentityProvider) IdentityReturns(result1 viewa.Identity) {
	fake.identityMutex.Lock()
	defer fake.identityMutex.Unlock()
	fake.IdentityStub = nil
	fake.identityReturns = struct {
		result1 viewa.Identity
	}{result1}
}

func (fake *IdentityProvider) IdentityReturnsOnCall(i int, result1 viewa.Identity) {
	fake.identityMutex.Lock()
	defer fake.identityMutex.Unlock()
	fake.IdentityStub = nil
	if fake.identityReturnsOnCall == nil {
		fake.identityReturnsOnCall = make(map[int]struct {
			result1 viewa.Identity
		})
	}
	fake.identityReturnsOnCall[i] = struct {
		result1 viewa.Identity
	}{result1}
}

func (fake *IdentityProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IdentityProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ view.IdentityProvider = new(IdentityProvider)
