// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/services/endpoint"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/services/view"
	viewa "github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
)

type EndpointService struct {
	GetIdentityStub        func(string, []byte) (viewa.Identity, error)
	getIdentityMutex       sync.RWMutex
	getIdentityArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	getIdentityReturns struct {
		result1 viewa.Identity
		result2 error
	}
	getIdentityReturnsOnCall map[int]struct {
		result1 viewa.Identity
		result2 error
	}
	ResolverStub        func(context.Context, viewa.Identity) (*endpoint.Resolver, []byte, error)
	resolverMutex       sync.RWMutex
	resolverArgsForCall []struct {
		arg1 context.Context
		arg2 viewa.Identity
	}
	resolverReturns struct {
		result1 *endpoint.Resolver
		result2 []byte
		result3 error
	}
	resolverReturnsOnCall map[int]struct {
		result1 *endpoint.Resolver
		result2 []byte
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EndpointService) GetIdentity(arg1 string, arg2 []byte) (viewa.Identity, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getIdentityMutex.Lock()
	ret, specificReturn := fake.getIdentityReturnsOnCall[len(fake.getIdentityArgsForCall)]
	fake.getIdentityArgsForCall = append(fake.getIdentityArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.GetIdentityStub
	fakeReturns := fake.getIdentityReturns
	fake.recordInvocation("GetIdentity", []interface{}{arg1, arg2Copy})
	fake.getIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *EndpointService) GetIdentityCallCount() int {
	fake.getIdentityMutex.RLock()
	defer fake.getIdentityMutex.RUnlock()
	return len(fake.getIdentityArgsForCall)
}

func (fake *EndpointService) GetIdentityCalls(stub func(string, []byte) (viewa.Identity, error)) {
	fake.getIdentityMutex.Lock()
	defer fake.getIdentityMutex.Unlock()
	fake.GetIdentityStub = stub
}

func (fake *EndpointService) GetIdentityArgsForCall(i int) (string, []byte) {
	fake.getIdentityMutex.RLock()
	defer fake.getIdentityMutex.RUnlock()
	argsForCall := fake.getIdentityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *EndpointService) GetIdentityReturns(result1 viewa.Identity, result2 error) {
	fake.getIdentityMutex.Lock()
	defer fake.getIdentityMutex.Unlock()
	fake.GetIdentityStub = nil
	fake.getIdentityReturns = struct {
		result1 viewa.Identity
		result2 error
	}{result1, result2}
}

func (fake *EndpointService) GetIdentityReturnsOnCall(i int, result1 viewa.Identity, result2 error) {
	fake.getIdentityMutex.Lock()
	defer fake.getIdentityMutex.Unlock()
	fake.GetIdentityStub = nil
	if fake.getIdentityReturnsOnCall == nil {
		fake.getIdentityReturnsOnCall = make(map[int]struct {
			result1 viewa.Identity
			result2 error
		})
	}
	fake.getIdentityReturnsOnCall[i] = struct {
		result1 viewa.Identity
		result2 error
	}{result1, result2}
}

func (fake *EndpointService) Resolver(arg1 context.Context, arg2 viewa.Identity) (*endpoint.Resolver, []byte, error) {
	fake.resolverMutex.Lock()
	ret, specificReturn := fake.resolverReturnsOnCall[len(fake.resolverArgsForCall)]
	fake.resolverArgsForCall = append(fake.resolverArgsForCall, struct {
		arg1 context.Context
		arg2 viewa.Identity
	}{arg1, arg2})
	stub := fake.ResolverStub
	fakeReturns := fake.resolverReturns
	fake.recordInvocation("Resolver", []interface{}{arg1, arg2})
	fake.resolverMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *EndpointService) ResolverCallCount() int {
	fake.resolverMutex.RLock()
	defer fake.resolverMutex.RUnlock()
	return len(fake.resolverArgsForCall)
}

func (fake *EndpointService) ResolverCalls(stub func(context.Context, viewa.Identity) (*endpoint.Resolver, []byte, error)) {
	fake.resolverMutex.Lock()
	defer fake.resolverMutex.Unlock()
	fake.ResolverStub = stub
}

func (fake *EndpointService) ResolverArgsForCall(i int) (context.Context, viewa.Identity) {
	fake.resolverMutex.RLock()
	defer fake.resolverMutex.RUnlock()
	argsForCall := fake.resolverArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *EndpointService) ResolverReturns(result1 *endpoint.Resolver, result2 []byte, result3 error) {
	fake.resolverMutex.Lock()
	defer fake.resolverMutex.Unlock()
	fake.ResolverStub = nil
	fake.resolverReturns = struct {
		result1 *endpoint.Resolver
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *EndpointService) ResolverReturnsOnCall(i int, result1 *endpoint.Resolver, result2 []byte, result3 error) {
	fake.resolverMutex.Lock()
	defer fake.resolverMutex.Unlock()
	fake.ResolverStub = nil
	if fake.resolverReturnsOnCall == nil {
		fake.resolverReturnsOnCall = make(map[int]struct {
			result1 *endpoint.Resolver
			result2 []byte
			result3 error
		})
	}
	fake.resolverReturnsOnCall[i] = struct {
		result1 *endpoint.Resolver
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *EndpointService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EndpointService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ view.EndpointService = new(EndpointService)
