// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/services/events"
)

type Event struct {
	MessageStub        func() interface{}
	messageMutex       sync.RWMutex
	messageArgsForCall []struct {
	}
	messageReturns struct {
		result1 interface{}
	}
	messageReturnsOnCall map[int]struct {
		result1 interface{}
	}
	TopicStub        func() string
	topicMutex       sync.RWMutex
	topicArgsForCall []struct {
	}
	topicReturns struct {
		result1 string
	}
	topicReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Event) Message() interface{} {
	fake.messageMutex.Lock()
	ret, specificReturn := fake.messageReturnsOnCall[len(fake.messageArgsForCall)]
	fake.messageArgsForCall = append(fake.messageArgsForCall, struct {
	}{})
	fake.recordInvocation("Message", []interface{}{})
	fake.messageMutex.Unlock()
	if fake.MessageStub != nil {
		return fake.MessageStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.messageReturns
	return fakeReturns.result1
}

func (fake *Event) MessageCallCount() int {
	fake.messageMutex.RLock()
	defer fake.messageMutex.RUnlock()
	return len(fake.messageArgsForCall)
}

func (fake *Event) MessageCalls(stub func() interface{}) {
	fake.messageMutex.Lock()
	defer fake.messageMutex.Unlock()
	fake.MessageStub = stub
}

func (fake *Event) MessageReturns(result1 interface{}) {
	fake.messageMutex.Lock()
	defer fake.messageMutex.Unlock()
	fake.MessageStub = nil
	fake.messageReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *Event) MessageReturnsOnCall(i int, result1 interface{}) {
	fake.messageMutex.Lock()
	defer fake.messageMutex.Unlock()
	fake.MessageStub = nil
	if fake.messageReturnsOnCall == nil {
		fake.messageReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.messageReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *Event) Topic() string {
	fake.topicMutex.Lock()
	ret, specificReturn := fake.topicReturnsOnCall[len(fake.topicArgsForCall)]
	fake.topicArgsForCall = append(fake.topicArgsForCall, struct {
	}{})
	fake.recordInvocation("Topic", []interface{}{})
	fake.topicMutex.Unlock()
	if fake.TopicStub != nil {
		return fake.TopicStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.topicReturns
	return fakeReturns.result1
}

func (fake *Event) TopicCallCount() int {
	fake.topicMutex.RLock()
	defer fake.topicMutex.RUnlock()
	return len(fake.topicArgsForCall)
}

func (fake *Event) TopicCalls(stub func() string) {
	fake.topicMutex.Lock()
	defer fake.topicMutex.Unlock()
	fake.TopicStub = stub
}

func (fake *Event) TopicReturns(result1 string) {
	fake.topicMutex.Lock()
	defer fake.topicMutex.Unlock()
	fake.TopicStub = nil
	fake.topicReturns = struct {
		result1 string
	}{result1}
}

func (fake *Event) TopicReturnsOnCall(i int, result1 string) {
	fake.topicMutex.Lock()
	defer fake.topicMutex.Unlock()
	fake.TopicStub = nil
	if fake.topicReturnsOnCall == nil {
		fake.topicReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.topicReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Event) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.messageMutex.RLock()
	defer fake.messageMutex.RUnlock()
	fake.topicMutex.RLock()
	defer fake.topicMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Event) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ events.Event = new(Event)
