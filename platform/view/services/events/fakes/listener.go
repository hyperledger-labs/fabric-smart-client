// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/services/events"
)

type Listener struct {
	OnReceiveStub        func(events.Event)
	onReceiveMutex       sync.RWMutex
	onReceiveArgsForCall []struct {
		arg1 events.Event
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Listener) OnReceive(arg1 events.Event) {
	fake.onReceiveMutex.Lock()
	fake.onReceiveArgsForCall = append(fake.onReceiveArgsForCall, struct {
		arg1 events.Event
	}{arg1})
	fake.recordInvocation("OnReceive", []interface{}{arg1})
	fake.onReceiveMutex.Unlock()
	if fake.OnReceiveStub != nil {
		fake.OnReceiveStub(arg1)
	}
}

func (fake *Listener) OnReceiveCallCount() int {
	fake.onReceiveMutex.RLock()
	defer fake.onReceiveMutex.RUnlock()
	return len(fake.onReceiveArgsForCall)
}

func (fake *Listener) OnReceiveCalls(stub func(events.Event)) {
	fake.onReceiveMutex.Lock()
	defer fake.onReceiveMutex.Unlock()
	fake.OnReceiveStub = stub
}

func (fake *Listener) OnReceiveArgsForCall(i int) events.Event {
	fake.onReceiveMutex.RLock()
	defer fake.onReceiveMutex.RUnlock()
	argsForCall := fake.onReceiveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Listener) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onReceiveMutex.RLock()
	defer fake.onReceiveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Listener) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ events.Listener = new(Listener)
