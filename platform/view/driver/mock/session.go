// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/driver"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
)

type Session struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	InfoStub        func() view.SessionInfo
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
	}
	infoReturns struct {
		result1 view.SessionInfo
	}
	infoReturnsOnCall map[int]struct {
		result1 view.SessionInfo
	}
	ReceiveStub        func() <-chan *view.Message
	receiveMutex       sync.RWMutex
	receiveArgsForCall []struct {
	}
	receiveReturns struct {
		result1 <-chan *view.Message
	}
	receiveReturnsOnCall map[int]struct {
		result1 <-chan *view.Message
	}
	SendStub        func([]byte) error
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		arg1 []byte
	}
	sendReturns struct {
		result1 error
	}
	sendReturnsOnCall map[int]struct {
		result1 error
	}
	SendErrorStub        func([]byte) error
	sendErrorMutex       sync.RWMutex
	sendErrorArgsForCall []struct {
		arg1 []byte
	}
	sendErrorReturns struct {
		result1 error
	}
	sendErrorReturnsOnCall map[int]struct {
		result1 error
	}
	SendErrorWithContextStub        func(context.Context, []byte) error
	sendErrorWithContextMutex       sync.RWMutex
	sendErrorWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
	}
	sendErrorWithContextReturns struct {
		result1 error
	}
	sendErrorWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	SendWithContextStub        func(context.Context, []byte) error
	sendWithContextMutex       sync.RWMutex
	sendWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
	}
	sendWithContextReturns struct {
		result1 error
	}
	sendWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Session) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		fake.CloseStub()
	}
}

func (fake *Session) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *Session) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *Session) Info() view.SessionInfo {
	fake.infoMutex.Lock()
	ret, specificReturn := fake.infoReturnsOnCall[len(fake.infoArgsForCall)]
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
	}{})
	stub := fake.InfoStub
	fakeReturns := fake.infoReturns
	fake.recordInvocation("Info", []interface{}{})
	fake.infoMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Session) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *Session) InfoCalls(stub func() view.SessionInfo) {
	fake.infoMutex.Lock()
	defer fake.infoMutex.Unlock()
	fake.InfoStub = stub
}

func (fake *Session) InfoReturns(result1 view.SessionInfo) {
	fake.infoMutex.Lock()
	defer fake.infoMutex.Unlock()
	fake.InfoStub = nil
	fake.infoReturns = struct {
		result1 view.SessionInfo
	}{result1}
}

func (fake *Session) InfoReturnsOnCall(i int, result1 view.SessionInfo) {
	fake.infoMutex.Lock()
	defer fake.infoMutex.Unlock()
	fake.InfoStub = nil
	if fake.infoReturnsOnCall == nil {
		fake.infoReturnsOnCall = make(map[int]struct {
			result1 view.SessionInfo
		})
	}
	fake.infoReturnsOnCall[i] = struct {
		result1 view.SessionInfo
	}{result1}
}

func (fake *Session) Receive() <-chan *view.Message {
	fake.receiveMutex.Lock()
	ret, specificReturn := fake.receiveReturnsOnCall[len(fake.receiveArgsForCall)]
	fake.receiveArgsForCall = append(fake.receiveArgsForCall, struct {
	}{})
	stub := fake.ReceiveStub
	fakeReturns := fake.receiveReturns
	fake.recordInvocation("Receive", []interface{}{})
	fake.receiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Session) ReceiveCallCount() int {
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	return len(fake.receiveArgsForCall)
}

func (fake *Session) ReceiveCalls(stub func() <-chan *view.Message) {
	fake.receiveMutex.Lock()
	defer fake.receiveMutex.Unlock()
	fake.ReceiveStub = stub
}

func (fake *Session) ReceiveReturns(result1 <-chan *view.Message) {
	fake.receiveMutex.Lock()
	defer fake.receiveMutex.Unlock()
	fake.ReceiveStub = nil
	fake.receiveReturns = struct {
		result1 <-chan *view.Message
	}{result1}
}

func (fake *Session) ReceiveReturnsOnCall(i int, result1 <-chan *view.Message) {
	fake.receiveMutex.Lock()
	defer fake.receiveMutex.Unlock()
	fake.ReceiveStub = nil
	if fake.receiveReturnsOnCall == nil {
		fake.receiveReturnsOnCall = make(map[int]struct {
			result1 <-chan *view.Message
		})
	}
	fake.receiveReturnsOnCall[i] = struct {
		result1 <-chan *view.Message
	}{result1}
}

func (fake *Session) Send(arg1 []byte) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.sendMutex.Lock()
	ret, specificReturn := fake.sendReturnsOnCall[len(fake.sendArgsForCall)]
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.SendStub
	fakeReturns := fake.sendReturns
	fake.recordInvocation("Send", []interface{}{arg1Copy})
	fake.sendMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Session) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *Session) SendCalls(stub func([]byte) error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = stub
}

func (fake *Session) SendArgsForCall(i int) []byte {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	argsForCall := fake.sendArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Session) SendReturns(result1 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	fake.sendReturns = struct {
		result1 error
	}{result1}
}

func (fake *Session) SendReturnsOnCall(i int, result1 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	if fake.sendReturnsOnCall == nil {
		fake.sendReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Session) SendError(arg1 []byte) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.sendErrorMutex.Lock()
	ret, specificReturn := fake.sendErrorReturnsOnCall[len(fake.sendErrorArgsForCall)]
	fake.sendErrorArgsForCall = append(fake.sendErrorArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.SendErrorStub
	fakeReturns := fake.sendErrorReturns
	fake.recordInvocation("SendError", []interface{}{arg1Copy})
	fake.sendErrorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Session) SendErrorCallCount() int {
	fake.sendErrorMutex.RLock()
	defer fake.sendErrorMutex.RUnlock()
	return len(fake.sendErrorArgsForCall)
}

func (fake *Session) SendErrorCalls(stub func([]byte) error) {
	fake.sendErrorMutex.Lock()
	defer fake.sendErrorMutex.Unlock()
	fake.SendErrorStub = stub
}

func (fake *Session) SendErrorArgsForCall(i int) []byte {
	fake.sendErrorMutex.RLock()
	defer fake.sendErrorMutex.RUnlock()
	argsForCall := fake.sendErrorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Session) SendErrorReturns(result1 error) {
	fake.sendErrorMutex.Lock()
	defer fake.sendErrorMutex.Unlock()
	fake.SendErrorStub = nil
	fake.sendErrorReturns = struct {
		result1 error
	}{result1}
}

func (fake *Session) SendErrorReturnsOnCall(i int, result1 error) {
	fake.sendErrorMutex.Lock()
	defer fake.sendErrorMutex.Unlock()
	fake.SendErrorStub = nil
	if fake.sendErrorReturnsOnCall == nil {
		fake.sendErrorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendErrorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Session) SendErrorWithContext(arg1 context.Context, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.sendErrorWithContextMutex.Lock()
	ret, specificReturn := fake.sendErrorWithContextReturnsOnCall[len(fake.sendErrorWithContextArgsForCall)]
	fake.sendErrorWithContextArgsForCall = append(fake.sendErrorWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.SendErrorWithContextStub
	fakeReturns := fake.sendErrorWithContextReturns
	fake.recordInvocation("SendErrorWithContext", []interface{}{arg1, arg2Copy})
	fake.sendErrorWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Session) SendErrorWithContextCallCount() int {
	fake.sendErrorWithContextMutex.RLock()
	defer fake.sendErrorWithContextMutex.RUnlock()
	return len(fake.sendErrorWithContextArgsForCall)
}

func (fake *Session) SendErrorWithContextCalls(stub func(context.Context, []byte) error) {
	fake.sendErrorWithContextMutex.Lock()
	defer fake.sendErrorWithContextMutex.Unlock()
	fake.SendErrorWithContextStub = stub
}

func (fake *Session) SendErrorWithContextArgsForCall(i int) (context.Context, []byte) {
	fake.sendErrorWithContextMutex.RLock()
	defer fake.sendErrorWithContextMutex.RUnlock()
	argsForCall := fake.sendErrorWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Session) SendErrorWithContextReturns(result1 error) {
	fake.sendErrorWithContextMutex.Lock()
	defer fake.sendErrorWithContextMutex.Unlock()
	fake.SendErrorWithContextStub = nil
	fake.sendErrorWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *Session) SendErrorWithContextReturnsOnCall(i int, result1 error) {
	fake.sendErrorWithContextMutex.Lock()
	defer fake.sendErrorWithContextMutex.Unlock()
	fake.SendErrorWithContextStub = nil
	if fake.sendErrorWithContextReturnsOnCall == nil {
		fake.sendErrorWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendErrorWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Session) SendWithContext(arg1 context.Context, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.sendWithContextMutex.Lock()
	ret, specificReturn := fake.sendWithContextReturnsOnCall[len(fake.sendWithContextArgsForCall)]
	fake.sendWithContextArgsForCall = append(fake.sendWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.SendWithContextStub
	fakeReturns := fake.sendWithContextReturns
	fake.recordInvocation("SendWithContext", []interface{}{arg1, arg2Copy})
	fake.sendWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Session) SendWithContextCallCount() int {
	fake.sendWithContextMutex.RLock()
	defer fake.sendWithContextMutex.RUnlock()
	return len(fake.sendWithContextArgsForCall)
}

func (fake *Session) SendWithContextCalls(stub func(context.Context, []byte) error) {
	fake.sendWithContextMutex.Lock()
	defer fake.sendWithContextMutex.Unlock()
	fake.SendWithContextStub = stub
}

func (fake *Session) SendWithContextArgsForCall(i int) (context.Context, []byte) {
	fake.sendWithContextMutex.RLock()
	defer fake.sendWithContextMutex.RUnlock()
	argsForCall := fake.sendWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Session) SendWithContextReturns(result1 error) {
	fake.sendWithContextMutex.Lock()
	defer fake.sendWithContextMutex.Unlock()
	fake.SendWithContextStub = nil
	fake.sendWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *Session) SendWithContextReturnsOnCall(i int, result1 error) {
	fake.sendWithContextMutex.Lock()
	defer fake.sendWithContextMutex.Unlock()
	fake.SendWithContextStub = nil
	if fake.sendWithContextReturnsOnCall == nil {
		fake.sendWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Session) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	fake.sendErrorMutex.RLock()
	defer fake.sendErrorMutex.RUnlock()
	fake.sendErrorWithContextMutex.RLock()
	defer fake.sendErrorWithContextMutex.RUnlock()
	fake.sendWithContextMutex.RLock()
	defer fake.sendWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Session) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.Session = new(Session)
