// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	drivera "github.com/hyperledger-labs/fabric-smart-client/platform/common/driver"
	"github.com/hyperledger-labs/fabric-smart-client/platform/common/services/identity"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/driver"
)

type SigService struct {
	AreMeStub        func(...identity.Identity) []string
	areMeMutex       sync.RWMutex
	areMeArgsForCall []struct {
		arg1 []identity.Identity
	}
	areMeReturns struct {
		result1 []string
	}
	areMeReturnsOnCall map[int]struct {
		result1 []string
	}
	GetSignerStub        func(identity.Identity) (drivera.Signer, error)
	getSignerMutex       sync.RWMutex
	getSignerArgsForCall []struct {
		arg1 identity.Identity
	}
	getSignerReturns struct {
		result1 drivera.Signer
		result2 error
	}
	getSignerReturnsOnCall map[int]struct {
		result1 drivera.Signer
		result2 error
	}
	GetSigningIdentityStub        func(identity.Identity) (drivera.SigningIdentity, error)
	getSigningIdentityMutex       sync.RWMutex
	getSigningIdentityArgsForCall []struct {
		arg1 identity.Identity
	}
	getSigningIdentityReturns struct {
		result1 drivera.SigningIdentity
		result2 error
	}
	getSigningIdentityReturnsOnCall map[int]struct {
		result1 drivera.SigningIdentity
		result2 error
	}
	GetVerifierStub        func(identity.Identity) (drivera.Verifier, error)
	getVerifierMutex       sync.RWMutex
	getVerifierArgsForCall []struct {
		arg1 identity.Identity
	}
	getVerifierReturns struct {
		result1 drivera.Verifier
		result2 error
	}
	getVerifierReturnsOnCall map[int]struct {
		result1 drivera.Verifier
		result2 error
	}
	IsMeStub        func(identity.Identity) bool
	isMeMutex       sync.RWMutex
	isMeArgsForCall []struct {
		arg1 identity.Identity
	}
	isMeReturns struct {
		result1 bool
	}
	isMeReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SigService) AreMe(arg1 ...identity.Identity) []string {
	fake.areMeMutex.Lock()
	ret, specificReturn := fake.areMeReturnsOnCall[len(fake.areMeArgsForCall)]
	fake.areMeArgsForCall = append(fake.areMeArgsForCall, struct {
		arg1 []identity.Identity
	}{arg1})
	stub := fake.AreMeStub
	fakeReturns := fake.areMeReturns
	fake.recordInvocation("AreMe", []interface{}{arg1})
	fake.areMeMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SigService) AreMeCallCount() int {
	fake.areMeMutex.RLock()
	defer fake.areMeMutex.RUnlock()
	return len(fake.areMeArgsForCall)
}

func (fake *SigService) AreMeCalls(stub func(...identity.Identity) []string) {
	fake.areMeMutex.Lock()
	defer fake.areMeMutex.Unlock()
	fake.AreMeStub = stub
}

func (fake *SigService) AreMeArgsForCall(i int) []identity.Identity {
	fake.areMeMutex.RLock()
	defer fake.areMeMutex.RUnlock()
	argsForCall := fake.areMeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SigService) AreMeReturns(result1 []string) {
	fake.areMeMutex.Lock()
	defer fake.areMeMutex.Unlock()
	fake.AreMeStub = nil
	fake.areMeReturns = struct {
		result1 []string
	}{result1}
}

func (fake *SigService) AreMeReturnsOnCall(i int, result1 []string) {
	fake.areMeMutex.Lock()
	defer fake.areMeMutex.Unlock()
	fake.AreMeStub = nil
	if fake.areMeReturnsOnCall == nil {
		fake.areMeReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.areMeReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *SigService) GetSigner(arg1 identity.Identity) (drivera.Signer, error) {
	fake.getSignerMutex.Lock()
	ret, specificReturn := fake.getSignerReturnsOnCall[len(fake.getSignerArgsForCall)]
	fake.getSignerArgsForCall = append(fake.getSignerArgsForCall, struct {
		arg1 identity.Identity
	}{arg1})
	stub := fake.GetSignerStub
	fakeReturns := fake.getSignerReturns
	fake.recordInvocation("GetSigner", []interface{}{arg1})
	fake.getSignerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *SigService) GetSignerCallCount() int {
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	return len(fake.getSignerArgsForCall)
}

func (fake *SigService) GetSignerCalls(stub func(identity.Identity) (drivera.Signer, error)) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = stub
}

func (fake *SigService) GetSignerArgsForCall(i int) identity.Identity {
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	argsForCall := fake.getSignerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SigService) GetSignerReturns(result1 drivera.Signer, result2 error) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = nil
	fake.getSignerReturns = struct {
		result1 drivera.Signer
		result2 error
	}{result1, result2}
}

func (fake *SigService) GetSignerReturnsOnCall(i int, result1 drivera.Signer, result2 error) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = nil
	if fake.getSignerReturnsOnCall == nil {
		fake.getSignerReturnsOnCall = make(map[int]struct {
			result1 drivera.Signer
			result2 error
		})
	}
	fake.getSignerReturnsOnCall[i] = struct {
		result1 drivera.Signer
		result2 error
	}{result1, result2}
}

func (fake *SigService) GetSigningIdentity(arg1 identity.Identity) (drivera.SigningIdentity, error) {
	fake.getSigningIdentityMutex.Lock()
	ret, specificReturn := fake.getSigningIdentityReturnsOnCall[len(fake.getSigningIdentityArgsForCall)]
	fake.getSigningIdentityArgsForCall = append(fake.getSigningIdentityArgsForCall, struct {
		arg1 identity.Identity
	}{arg1})
	stub := fake.GetSigningIdentityStub
	fakeReturns := fake.getSigningIdentityReturns
	fake.recordInvocation("GetSigningIdentity", []interface{}{arg1})
	fake.getSigningIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *SigService) GetSigningIdentityCallCount() int {
	fake.getSigningIdentityMutex.RLock()
	defer fake.getSigningIdentityMutex.RUnlock()
	return len(fake.getSigningIdentityArgsForCall)
}

func (fake *SigService) GetSigningIdentityCalls(stub func(identity.Identity) (drivera.SigningIdentity, error)) {
	fake.getSigningIdentityMutex.Lock()
	defer fake.getSigningIdentityMutex.Unlock()
	fake.GetSigningIdentityStub = stub
}

func (fake *SigService) GetSigningIdentityArgsForCall(i int) identity.Identity {
	fake.getSigningIdentityMutex.RLock()
	defer fake.getSigningIdentityMutex.RUnlock()
	argsForCall := fake.getSigningIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SigService) GetSigningIdentityReturns(result1 drivera.SigningIdentity, result2 error) {
	fake.getSigningIdentityMutex.Lock()
	defer fake.getSigningIdentityMutex.Unlock()
	fake.GetSigningIdentityStub = nil
	fake.getSigningIdentityReturns = struct {
		result1 drivera.SigningIdentity
		result2 error
	}{result1, result2}
}

func (fake *SigService) GetSigningIdentityReturnsOnCall(i int, result1 drivera.SigningIdentity, result2 error) {
	fake.getSigningIdentityMutex.Lock()
	defer fake.getSigningIdentityMutex.Unlock()
	fake.GetSigningIdentityStub = nil
	if fake.getSigningIdentityReturnsOnCall == nil {
		fake.getSigningIdentityReturnsOnCall = make(map[int]struct {
			result1 drivera.SigningIdentity
			result2 error
		})
	}
	fake.getSigningIdentityReturnsOnCall[i] = struct {
		result1 drivera.SigningIdentity
		result2 error
	}{result1, result2}
}

func (fake *SigService) GetVerifier(arg1 identity.Identity) (drivera.Verifier, error) {
	fake.getVerifierMutex.Lock()
	ret, specificReturn := fake.getVerifierReturnsOnCall[len(fake.getVerifierArgsForCall)]
	fake.getVerifierArgsForCall = append(fake.getVerifierArgsForCall, struct {
		arg1 identity.Identity
	}{arg1})
	stub := fake.GetVerifierStub
	fakeReturns := fake.getVerifierReturns
	fake.recordInvocation("GetVerifier", []interface{}{arg1})
	fake.getVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *SigService) GetVerifierCallCount() int {
	fake.getVerifierMutex.RLock()
	defer fake.getVerifierMutex.RUnlock()
	return len(fake.getVerifierArgsForCall)
}

func (fake *SigService) GetVerifierCalls(stub func(identity.Identity) (drivera.Verifier, error)) {
	fake.getVerifierMutex.Lock()
	defer fake.getVerifierMutex.Unlock()
	fake.GetVerifierStub = stub
}

func (fake *SigService) GetVerifierArgsForCall(i int) identity.Identity {
	fake.getVerifierMutex.RLock()
	defer fake.getVerifierMutex.RUnlock()
	argsForCall := fake.getVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SigService) GetVerifierReturns(result1 drivera.Verifier, result2 error) {
	fake.getVerifierMutex.Lock()
	defer fake.getVerifierMutex.Unlock()
	fake.GetVerifierStub = nil
	fake.getVerifierReturns = struct {
		result1 drivera.Verifier
		result2 error
	}{result1, result2}
}

func (fake *SigService) GetVerifierReturnsOnCall(i int, result1 drivera.Verifier, result2 error) {
	fake.getVerifierMutex.Lock()
	defer fake.getVerifierMutex.Unlock()
	fake.GetVerifierStub = nil
	if fake.getVerifierReturnsOnCall == nil {
		fake.getVerifierReturnsOnCall = make(map[int]struct {
			result1 drivera.Verifier
			result2 error
		})
	}
	fake.getVerifierReturnsOnCall[i] = struct {
		result1 drivera.Verifier
		result2 error
	}{result1, result2}
}

func (fake *SigService) IsMe(arg1 identity.Identity) bool {
	fake.isMeMutex.Lock()
	ret, specificReturn := fake.isMeReturnsOnCall[len(fake.isMeArgsForCall)]
	fake.isMeArgsForCall = append(fake.isMeArgsForCall, struct {
		arg1 identity.Identity
	}{arg1})
	stub := fake.IsMeStub
	fakeReturns := fake.isMeReturns
	fake.recordInvocation("IsMe", []interface{}{arg1})
	fake.isMeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SigService) IsMeCallCount() int {
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	return len(fake.isMeArgsForCall)
}

func (fake *SigService) IsMeCalls(stub func(identity.Identity) bool) {
	fake.isMeMutex.Lock()
	defer fake.isMeMutex.Unlock()
	fake.IsMeStub = stub
}

func (fake *SigService) IsMeArgsForCall(i int) identity.Identity {
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	argsForCall := fake.isMeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SigService) IsMeReturns(result1 bool) {
	fake.isMeMutex.Lock()
	defer fake.isMeMutex.Unlock()
	fake.IsMeStub = nil
	fake.isMeReturns = struct {
		result1 bool
	}{result1}
}

func (fake *SigService) IsMeReturnsOnCall(i int, result1 bool) {
	fake.isMeMutex.Lock()
	defer fake.isMeMutex.Unlock()
	fake.IsMeStub = nil
	if fake.isMeReturnsOnCall == nil {
		fake.isMeReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isMeReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *SigService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.areMeMutex.RLock()
	defer fake.areMeMutex.RUnlock()
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	fake.getSigningIdentityMutex.RLock()
	defer fake.getSigningIdentityMutex.RUnlock()
	fake.getVerifierMutex.RLock()
	defer fake.getVerifierMutex.RUnlock()
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SigService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.SigService = new(SigService)
