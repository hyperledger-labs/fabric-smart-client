// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/hyperledger/fabric-x-committer/api/protoblocktx"
	"github.com/hyperledger/fabric-x-committer/api/protoqueryservice"
	"google.golang.org/grpc"
)

type FakeQueryServiceClient struct {
	BeginViewStub        func(context.Context, *protoqueryservice.ViewParameters, ...grpc.CallOption) (*protoqueryservice.View, error)
	beginViewMutex       sync.RWMutex
	beginViewArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.ViewParameters
		arg3 []grpc.CallOption
	}
	beginViewReturns struct {
		result1 *protoqueryservice.View
		result2 error
	}
	beginViewReturnsOnCall map[int]struct {
		result1 *protoqueryservice.View
		result2 error
	}
	EndViewStub        func(context.Context, *protoqueryservice.View, ...grpc.CallOption) (*protoqueryservice.View, error)
	endViewMutex       sync.RWMutex
	endViewArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.View
		arg3 []grpc.CallOption
	}
	endViewReturns struct {
		result1 *protoqueryservice.View
		result2 error
	}
	endViewReturnsOnCall map[int]struct {
		result1 *protoqueryservice.View
		result2 error
	}
	GetConfigTransactionStub        func(context.Context, *protoqueryservice.Empty, ...grpc.CallOption) (*protoblocktx.ConfigTransaction, error)
	getConfigTransactionMutex       sync.RWMutex
	getConfigTransactionArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.Empty
		arg3 []grpc.CallOption
	}
	getConfigTransactionReturns struct {
		result1 *protoblocktx.ConfigTransaction
		result2 error
	}
	getConfigTransactionReturnsOnCall map[int]struct {
		result1 *protoblocktx.ConfigTransaction
		result2 error
	}
	GetNamespacePoliciesStub        func(context.Context, *protoqueryservice.Empty, ...grpc.CallOption) (*protoblocktx.NamespacePolicies, error)
	getNamespacePoliciesMutex       sync.RWMutex
	getNamespacePoliciesArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.Empty
		arg3 []grpc.CallOption
	}
	getNamespacePoliciesReturns struct {
		result1 *protoblocktx.NamespacePolicies
		result2 error
	}
	getNamespacePoliciesReturnsOnCall map[int]struct {
		result1 *protoblocktx.NamespacePolicies
		result2 error
	}
	GetRowsStub        func(context.Context, *protoqueryservice.Query, ...grpc.CallOption) (*protoqueryservice.Rows, error)
	getRowsMutex       sync.RWMutex
	getRowsArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.Query
		arg3 []grpc.CallOption
	}
	getRowsReturns struct {
		result1 *protoqueryservice.Rows
		result2 error
	}
	getRowsReturnsOnCall map[int]struct {
		result1 *protoqueryservice.Rows
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQueryServiceClient) BeginView(arg1 context.Context, arg2 *protoqueryservice.ViewParameters, arg3 ...grpc.CallOption) (*protoqueryservice.View, error) {
	fake.beginViewMutex.Lock()
	ret, specificReturn := fake.beginViewReturnsOnCall[len(fake.beginViewArgsForCall)]
	fake.beginViewArgsForCall = append(fake.beginViewArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.ViewParameters
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.BeginViewStub
	fakeReturns := fake.beginViewReturns
	fake.recordInvocation("BeginView", []interface{}{arg1, arg2, arg3})
	fake.beginViewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) BeginViewCallCount() int {
	fake.beginViewMutex.RLock()
	defer fake.beginViewMutex.RUnlock()
	return len(fake.beginViewArgsForCall)
}

func (fake *FakeQueryServiceClient) BeginViewCalls(stub func(context.Context, *protoqueryservice.ViewParameters, ...grpc.CallOption) (*protoqueryservice.View, error)) {
	fake.beginViewMutex.Lock()
	defer fake.beginViewMutex.Unlock()
	fake.BeginViewStub = stub
}

func (fake *FakeQueryServiceClient) BeginViewArgsForCall(i int) (context.Context, *protoqueryservice.ViewParameters, []grpc.CallOption) {
	fake.beginViewMutex.RLock()
	defer fake.beginViewMutex.RUnlock()
	argsForCall := fake.beginViewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) BeginViewReturns(result1 *protoqueryservice.View, result2 error) {
	fake.beginViewMutex.Lock()
	defer fake.beginViewMutex.Unlock()
	fake.BeginViewStub = nil
	fake.beginViewReturns = struct {
		result1 *protoqueryservice.View
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) BeginViewReturnsOnCall(i int, result1 *protoqueryservice.View, result2 error) {
	fake.beginViewMutex.Lock()
	defer fake.beginViewMutex.Unlock()
	fake.BeginViewStub = nil
	if fake.beginViewReturnsOnCall == nil {
		fake.beginViewReturnsOnCall = make(map[int]struct {
			result1 *protoqueryservice.View
			result2 error
		})
	}
	fake.beginViewReturnsOnCall[i] = struct {
		result1 *protoqueryservice.View
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) EndView(arg1 context.Context, arg2 *protoqueryservice.View, arg3 ...grpc.CallOption) (*protoqueryservice.View, error) {
	fake.endViewMutex.Lock()
	ret, specificReturn := fake.endViewReturnsOnCall[len(fake.endViewArgsForCall)]
	fake.endViewArgsForCall = append(fake.endViewArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.View
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.EndViewStub
	fakeReturns := fake.endViewReturns
	fake.recordInvocation("EndView", []interface{}{arg1, arg2, arg3})
	fake.endViewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) EndViewCallCount() int {
	fake.endViewMutex.RLock()
	defer fake.endViewMutex.RUnlock()
	return len(fake.endViewArgsForCall)
}

func (fake *FakeQueryServiceClient) EndViewCalls(stub func(context.Context, *protoqueryservice.View, ...grpc.CallOption) (*protoqueryservice.View, error)) {
	fake.endViewMutex.Lock()
	defer fake.endViewMutex.Unlock()
	fake.EndViewStub = stub
}

func (fake *FakeQueryServiceClient) EndViewArgsForCall(i int) (context.Context, *protoqueryservice.View, []grpc.CallOption) {
	fake.endViewMutex.RLock()
	defer fake.endViewMutex.RUnlock()
	argsForCall := fake.endViewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) EndViewReturns(result1 *protoqueryservice.View, result2 error) {
	fake.endViewMutex.Lock()
	defer fake.endViewMutex.Unlock()
	fake.EndViewStub = nil
	fake.endViewReturns = struct {
		result1 *protoqueryservice.View
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) EndViewReturnsOnCall(i int, result1 *protoqueryservice.View, result2 error) {
	fake.endViewMutex.Lock()
	defer fake.endViewMutex.Unlock()
	fake.EndViewStub = nil
	if fake.endViewReturnsOnCall == nil {
		fake.endViewReturnsOnCall = make(map[int]struct {
			result1 *protoqueryservice.View
			result2 error
		})
	}
	fake.endViewReturnsOnCall[i] = struct {
		result1 *protoqueryservice.View
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetConfigTransaction(arg1 context.Context, arg2 *protoqueryservice.Empty, arg3 ...grpc.CallOption) (*protoblocktx.ConfigTransaction, error) {
	fake.getConfigTransactionMutex.Lock()
	ret, specificReturn := fake.getConfigTransactionReturnsOnCall[len(fake.getConfigTransactionArgsForCall)]
	fake.getConfigTransactionArgsForCall = append(fake.getConfigTransactionArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.Empty
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetConfigTransactionStub
	fakeReturns := fake.getConfigTransactionReturns
	fake.recordInvocation("GetConfigTransaction", []interface{}{arg1, arg2, arg3})
	fake.getConfigTransactionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) GetConfigTransactionCallCount() int {
	fake.getConfigTransactionMutex.RLock()
	defer fake.getConfigTransactionMutex.RUnlock()
	return len(fake.getConfigTransactionArgsForCall)
}

func (fake *FakeQueryServiceClient) GetConfigTransactionCalls(stub func(context.Context, *protoqueryservice.Empty, ...grpc.CallOption) (*protoblocktx.ConfigTransaction, error)) {
	fake.getConfigTransactionMutex.Lock()
	defer fake.getConfigTransactionMutex.Unlock()
	fake.GetConfigTransactionStub = stub
}

func (fake *FakeQueryServiceClient) GetConfigTransactionArgsForCall(i int) (context.Context, *protoqueryservice.Empty, []grpc.CallOption) {
	fake.getConfigTransactionMutex.RLock()
	defer fake.getConfigTransactionMutex.RUnlock()
	argsForCall := fake.getConfigTransactionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) GetConfigTransactionReturns(result1 *protoblocktx.ConfigTransaction, result2 error) {
	fake.getConfigTransactionMutex.Lock()
	defer fake.getConfigTransactionMutex.Unlock()
	fake.GetConfigTransactionStub = nil
	fake.getConfigTransactionReturns = struct {
		result1 *protoblocktx.ConfigTransaction
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetConfigTransactionReturnsOnCall(i int, result1 *protoblocktx.ConfigTransaction, result2 error) {
	fake.getConfigTransactionMutex.Lock()
	defer fake.getConfigTransactionMutex.Unlock()
	fake.GetConfigTransactionStub = nil
	if fake.getConfigTransactionReturnsOnCall == nil {
		fake.getConfigTransactionReturnsOnCall = make(map[int]struct {
			result1 *protoblocktx.ConfigTransaction
			result2 error
		})
	}
	fake.getConfigTransactionReturnsOnCall[i] = struct {
		result1 *protoblocktx.ConfigTransaction
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetNamespacePolicies(arg1 context.Context, arg2 *protoqueryservice.Empty, arg3 ...grpc.CallOption) (*protoblocktx.NamespacePolicies, error) {
	fake.getNamespacePoliciesMutex.Lock()
	ret, specificReturn := fake.getNamespacePoliciesReturnsOnCall[len(fake.getNamespacePoliciesArgsForCall)]
	fake.getNamespacePoliciesArgsForCall = append(fake.getNamespacePoliciesArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.Empty
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetNamespacePoliciesStub
	fakeReturns := fake.getNamespacePoliciesReturns
	fake.recordInvocation("GetNamespacePolicies", []interface{}{arg1, arg2, arg3})
	fake.getNamespacePoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) GetNamespacePoliciesCallCount() int {
	fake.getNamespacePoliciesMutex.RLock()
	defer fake.getNamespacePoliciesMutex.RUnlock()
	return len(fake.getNamespacePoliciesArgsForCall)
}

func (fake *FakeQueryServiceClient) GetNamespacePoliciesCalls(stub func(context.Context, *protoqueryservice.Empty, ...grpc.CallOption) (*protoblocktx.NamespacePolicies, error)) {
	fake.getNamespacePoliciesMutex.Lock()
	defer fake.getNamespacePoliciesMutex.Unlock()
	fake.GetNamespacePoliciesStub = stub
}

func (fake *FakeQueryServiceClient) GetNamespacePoliciesArgsForCall(i int) (context.Context, *protoqueryservice.Empty, []grpc.CallOption) {
	fake.getNamespacePoliciesMutex.RLock()
	defer fake.getNamespacePoliciesMutex.RUnlock()
	argsForCall := fake.getNamespacePoliciesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) GetNamespacePoliciesReturns(result1 *protoblocktx.NamespacePolicies, result2 error) {
	fake.getNamespacePoliciesMutex.Lock()
	defer fake.getNamespacePoliciesMutex.Unlock()
	fake.GetNamespacePoliciesStub = nil
	fake.getNamespacePoliciesReturns = struct {
		result1 *protoblocktx.NamespacePolicies
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetNamespacePoliciesReturnsOnCall(i int, result1 *protoblocktx.NamespacePolicies, result2 error) {
	fake.getNamespacePoliciesMutex.Lock()
	defer fake.getNamespacePoliciesMutex.Unlock()
	fake.GetNamespacePoliciesStub = nil
	if fake.getNamespacePoliciesReturnsOnCall == nil {
		fake.getNamespacePoliciesReturnsOnCall = make(map[int]struct {
			result1 *protoblocktx.NamespacePolicies
			result2 error
		})
	}
	fake.getNamespacePoliciesReturnsOnCall[i] = struct {
		result1 *protoblocktx.NamespacePolicies
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetRows(arg1 context.Context, arg2 *protoqueryservice.Query, arg3 ...grpc.CallOption) (*protoqueryservice.Rows, error) {
	fake.getRowsMutex.Lock()
	ret, specificReturn := fake.getRowsReturnsOnCall[len(fake.getRowsArgsForCall)]
	fake.getRowsArgsForCall = append(fake.getRowsArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.Query
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetRowsStub
	fakeReturns := fake.getRowsReturns
	fake.recordInvocation("GetRows", []interface{}{arg1, arg2, arg3})
	fake.getRowsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) GetRowsCallCount() int {
	fake.getRowsMutex.RLock()
	defer fake.getRowsMutex.RUnlock()
	return len(fake.getRowsArgsForCall)
}

func (fake *FakeQueryServiceClient) GetRowsCalls(stub func(context.Context, *protoqueryservice.Query, ...grpc.CallOption) (*protoqueryservice.Rows, error)) {
	fake.getRowsMutex.Lock()
	defer fake.getRowsMutex.Unlock()
	fake.GetRowsStub = stub
}

func (fake *FakeQueryServiceClient) GetRowsArgsForCall(i int) (context.Context, *protoqueryservice.Query, []grpc.CallOption) {
	fake.getRowsMutex.RLock()
	defer fake.getRowsMutex.RUnlock()
	argsForCall := fake.getRowsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) GetRowsReturns(result1 *protoqueryservice.Rows, result2 error) {
	fake.getRowsMutex.Lock()
	defer fake.getRowsMutex.Unlock()
	fake.GetRowsStub = nil
	fake.getRowsReturns = struct {
		result1 *protoqueryservice.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetRowsReturnsOnCall(i int, result1 *protoqueryservice.Rows, result2 error) {
	fake.getRowsMutex.Lock()
	defer fake.getRowsMutex.Unlock()
	fake.GetRowsStub = nil
	if fake.getRowsReturnsOnCall == nil {
		fake.getRowsReturnsOnCall = make(map[int]struct {
			result1 *protoqueryservice.Rows
			result2 error
		})
	}
	fake.getRowsReturnsOnCall[i] = struct {
		result1 *protoqueryservice.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.beginViewMutex.RLock()
	defer fake.beginViewMutex.RUnlock()
	fake.endViewMutex.RLock()
	defer fake.endViewMutex.RUnlock()
	fake.getConfigTransactionMutex.RLock()
	defer fake.getConfigTransactionMutex.RUnlock()
	fake.getNamespacePoliciesMutex.RLock()
	defer fake.getNamespacePoliciesMutex.RUnlock()
	fake.getRowsMutex.RLock()
	defer fake.getRowsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQueryServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protoqueryservice.QueryServiceClient = new(FakeQueryServiceClient)
